Hi Saraswathi,

Thank you for reaching out and considering me for the Associate-Software Engineering position at Goldman Sachs. I’m excited to hear about this opportunity, and I truly appreciate your kind words regarding my experience.

I am very interested in exploring this role further. I have attached my updated resume and have also applied through the link you provided.

Please let me know if there’s anything else you need from my side. I look forward to hearing more about the position and the next steps.
 
Thanks & regards,
Madhu M.

Core Proficiency
Languages & Frameworks: Java 8/11, Spring Boot, JPA/Hibernate, REST APIs, Microservices
Databases: PostgreSQL, MySQL, MongoDB, Redis
Messaging & Streaming: Apache Kafka
Testing & Tools: JUnit, Mockito, Postman, Git, GitHub, GitLab, Maven, Gradle
Development Practices: Agile/Scrum, SDLC, CI/CD (Basic Implementation)

1. Java_home
2. shell :- commd.exe
3. git commit -m "Add missing gradle-wrapper.jar"

Can you explain what React is and why it's used
React is a JavaScript library primarily used for building user interfaces, especially single-page applications using a component-based architecture.
---------------------------------------------------------------------------------------
Can you explain the difference between functional and class-based components in React

functional components are the modern way to write React, especially with the introduction of Hooks in React 16.8.

But the main difference is:
Class components use this.state, this.setState(), and lifecycle methods like componentDidMount().
Functional components use Hooks (useState, useEffect, etc.), making them cleaner and easier to test.

Also, functional components promote declarative and less verbose code, which is what you were referring to by "reduced lines of code."

import React, { Component } from 'react';

class Counter extends Component {

  constructor(props) {
    super(props);
    this.state = { count: 0 }; // initial state
  }

  increment = () => {
    this.setState({ count: this.state.count + 1 }); // update state
  }

  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={this.increment}>Increment</button>
      </div>
    );
  }
}

---------------------------------------------------------------------------------------

How does state management work in functional components

state can be local, global, or even from the server.

useState  to handle local state
useContext / external libraries like Redux or Zustand  for global state
React Query, SWR, or fetching APIs  for server state

useState (Functional Components)
************
When used: To manage local state in functional components.

import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0); // count is state, setCount is updater

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

useContext
*****************
When used: For sharing state (like theme, auth, user info) across multiple components without prop drilling.

import React, { useContext, createContext } from 'react';

const ThemeContext = createContext(); // 1. Create Context

function App() {
  return (
    <ThemeContext.Provider value="dark"> {/* 2. Provide */}
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar() {
  return <ThemedButton />;
}

function ThemedButton() {
  const theme = useContext(ThemeContext); // 3. Consume
  return <button className={theme}>I am {theme} themed</button>;
}

useEffect
*************
When used: To handle side effects like:

Fetching data
Setting up subscriptions
Manual DOM manipulation
Listening to events

import React, { useEffect, useState } from 'react';

function UserList() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    // Side effect: fetching data
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []); // empty dependency array = run only on mount

  return (
    <ul>
      {users.map(user => <li key={user.id}>{user.name}</li>)}
    </ul>
  );
}

React Query (Server State Management)
***************
When used: For fetching, caching, and updating server data without manually managing loading/error states.

npm install @tanstack/react-query


import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

function UserList() {
  const { data, isLoading, error } = useQuery({
    queryKey: ['users'],
    queryFn: () => axios.get('https://jsonplaceholder.typicode.com/users').then(res => res.data),
  });

  if (isLoading) return <p>Loading...</p>;
  if (error) return <p>Error fetching users</p>;

  return (
    <ul>
      {data.map(user => <li key={user.id}>{user.name}</li>)}
    </ul>
  );
}

---------------------------------------------------------------------------------------
Can you explain the difference between useEffect + fetch vs using React Query Why might someone prefer React Query


useEffect + fetch is a manual way of handling server data:
***********
You use useEffect to run the fetch logic
Use useState to store the result
Also manually handle loading, error, and success states

const [data, setData] = useState(null);
const [loading, setLoading] = useState(true);
const [error, setError] = useState(null);

useEffect(() => {
  fetch('/api/data')
    .then(res => res.json())
    .then(setData)
    .catch(setError)
    .finally(() => setLoading(false));
}, []);


React Query handles all of that for you:
***********
Automatically manages loading, error, data, and refetching
Caches data and avoids refetching unnecessarily
Supports background refetching, pagination, retries, stale times, etc.

const { data, error, isLoading } = useQuery({
  queryKey: ['users'],
  queryFn: () => fetchUsers()
});

Why prefer React Query
Cleaner code (less boilerplate)
Auto caching and refetching
DevTools and stale-while-revalidate support
Built-in pagination, polling, retries, and more

-------------------------------------------------------------------------------------------------------------------------
What are React keys, and why are they important when rendering lists

React keys are unique identifiers that help React identify which items have changed, are added, or are removed when rendering lists.

Why keys are important:
React uses keys to optimize rendering during re-renders.
Without proper keys, React may re-render or reorder DOM elements incorrectly, causing unexpected UI bugs (like input fields losing focus).

const users = [{ id: 101, name: "Alice" }, { id: 102, name: "Bob" }];
return (
  <ul>
    {users.map(user => (
      <li key={user.id}>{user.name}</li>
    ))}
  </ul>
);

-------------------------------------------------------------------------------------------------------------------------
 What's the difference between useCallback and useMemo in React
 
 | Hook          | Purpose                                  | Returns  | Use Case Example                                 |
| ------------- | ---------------------------------------- | -------- | ------------------------------------------------ |
| `useCallback` | Memoizes a **function**                  | Function | Prevents re-creating same function on re-renders |
| `useMemo`     | Memoizes a **calculated value (result)** | Value    | Prevents expensive re-computations               |

1. useCallback – for functions
******************

Used when you want to memoize a function so it doesn’t get re-created on every re-render.

const handleClick = useCallback(() => {
  console.log("Clicked");
}, []);

 Useful when passing functions to child components that rely on React.memo() to prevent unnecessary re-renders.

2. useMemo – for values
***************************
Used to memoize the result of a calculation (e.g., filtering, sorting, computation).

const expensiveValue = useMemo(() => {
  return computeHeavyLogic(input);
}, [input]);

Useful to avoid recalculating the same logic unless inputs change.

-------------------------------------------------------------------------------------------------------------------------
Can you explain when useEffect is triggered and how it's different from useMemo

useEffect
*********
Runs a side effect after render (like fetching data, updating DOM, timers, etc.)
Doesn’t return a value — just executes logic
Always runs when dependencies change
Common for API calls

useEffect(() => {
  fetchData();  // side-effect
}, [input]);  // runs when `input` changes

useMemo
*********
Memoizes a computed value, like the result of a function
Avoids re-running expensive calculations
Doesn't cause side effects — it's pure

const filteredItems = useMemo(() => {
  return items.filter(i => i.active);
}, [items]);

-------------------------------------------------------------------------------------------------------------------------
Suppose you have a component with a button that updates a counter. How do you prevent unnecessary re-rendering of child components when the parent state updates

When the parent component re-renders, all its children re-render by default — even if their props haven’t changed.

To prevent that, we use:

1. React.memo() for child components
Memoizes the component so it only re-renders when props actually change

2. useCallback() for stable function props
If you pass a function from parent to child (like handleClick), it gets re-created on every render — unless you memoize it using useCallback.

import React, { useState, useCallback } from 'react';

const Child = React.memo(({ onClick }) => {
  console.log("Child rendered");
  return <button onClick={onClick}>Click Me</button>;
});

export default function Parent() {
  const [count, setCount] = useState(0);
  const [dummy, setDummy] = useState(false);

  const handleClick = useCallback(() => {
    setCount(c => c + 1);
  }, []);

  return (
    <div>
      <p>Count: {count}</p>
      <Child onClick={handleClick} />
      <button onClick={() => setDummy(!dummy)}>Toggle Dummy</button>
    </div>
  );
}

-------------------------------------------------------------------------------------------------------------------------
What is Prop Drilling

Prop drilling is when you pass props through multiple nested components, even though only the deeply nested child needs them.
This often leads to messy, tightly coupled code, especially when many components in the middle don’t use the prop — they just forward it.

Example of Prop Drilling:

function App() {
  const user = { name: 'Alice' };
  return <Parent user={user} />;
}

function Parent({ user }) {
  return <Child user={user} />;
}

function Child({ user }) {
  return <Profile user={user} />;
}

function Profile({ user }) {
  return <h2>{user.name}</h2>;
}
user has to be passed through Parent and Child, even though only Profile uses it.

How to Solve Prop Drilling
**********************

 1. useContext + Context API
 ******************************
 
Create a context and share data globally, without passing props manually.

const UserContext = React.createContext();

function App() {
  const user = { name: "Alice" };
  return (
    <UserContext.Provider value={user}>
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = useContext(UserContext);
  return <h2>{user.name}</h2>;
}

No drilling — any component can access user directly from context.

2. State Management Libraries
*****************************
Redux, Zustand, Jotai, Recoil – for complex apps
These help manage global state and avoid passing props down long chains
----------------------------------------------------------------------------------------------------------------------
What is Reconciliation in React

Reconciliation is the process React uses to compare the new Virtual DOM with the previous one and figure out:
What has changed
What needs to be updated in the real DOM

React does this to update the minimum necessary parts of the DOM efficiently.

How it works:
You change state or props
React creates a new Virtual DOM tree
It compares the new tree with the old tree (this is called diffing)
Only the changed parts are updated in the real DOM
This process is what makes React fast — because it avoids unnecessary DOM manipulations.

const [count, setCount] = useState(0);
return <div><h1>{count}</h1><p>Hello</p></div>

When you update count, React doesn't re-render the whole page
It only updates the <h1> element inside the real DOM
This efficient update is due to the reconciliation process

Bonus:
React uses a keyed algorithm for lists during reconciliation
That’s why unique key props are important in lists — to help React track which items changed
----------------------------------------------------------------------------------------------------------------------
Controlled vs Uncontrolled Components in React

 Controlled Component
 ************************
 
A form input whose value is controlled by React state.
React is the single source of truth, and you use useState to handle the input.

function ControlledInput() {
  const [name, setName] = useState("");

  return (
    <input
      type="text"
      value={name}
      onChange={(e) => setName(e.target.value)}
    />
  );
}
Input value is always in sync with name state
You have full control: validations, formatting, etc.

Uncontrolled Component
************************
A form input where the value is handled by the DOM, not by React.
You don’t bind the value to state — instead, you access it using a ref when needed.

function UncontrolledInput() {
  const inputRef = useRef();

  const handleSubmit = () => {
    alert(inputRef.current.value);
  };

  return (
    <>
      <input type="text" ref={inputRef} />
      <button onClick={handleSubmit}>Submit</button>
    </>
  );
}

React doesn’t track input value on each change
Useful for quick forms or integrating with non-React libraries
----------------------------------------------------------------------------------------------------------------------
 What is React, and why would you choose it over other JavaScript frameworks
 
React is a JavaScript library developed by Facebook for building user interfaces, especially for single-page applications.

It’s widely used because:
It uses a component-based architecture, allowing reusable, isolated UI blocks
It uses a Virtual DOM and a process called reconciliation to efficiently update the UI without reloading the entire page
It supports declarative programming, making code easier to read and debug
It’s lightweight compared to full frameworks like Angular
A rich ecosystem (React Router, Redux, React Query, etc.) makes it flexible and scalable
----------------------------------------------------------------------------------------------------------------------
What is a component in React Can you describe its purpose

A component in React is a reusable, independent block of code that defines part of the UI.

Components can contain:
Business logic (e.g., handling events, API calls)
State management
UI templates (returned as JSX)

Two Types of Components:

1. Class Components
Use this.state and this.setState() for state management

Use lifecycle methods like componentDidMount

2. Functional Components (modern standard)
Use hooks like:
useState() – for state
useEffect() – for side effects (like API calls)

----------------------------------------------------------------------------------------------------------------------
What is JSX, and how is it different from regular JavaScript

JSX (JavaScript XML) is a syntax extension to JavaScript that lets you write HTML-like code inside JavaScript.

JSX makes it easier to:
Describe UI in a declarative way
Combine layout (HTML) and logic (JavaScript) in a single file

| JavaScript                    | JSX                                       |
| ----------------------------- | ----------------------------------------- |
| Standard language             | JSX is **not valid JS** on its own        |
| Needs `React.createElement()` | JSX compiles to that automatically        |
| No HTML allowed               | Looks like HTML + supports JS expressions |

const element = <h1>Hello, {user.name}</h1>;
const element = React.createElement('h1', null, `Hello, ${user.name}`);
----------------------------------------------------------------------------------------------------------------------
 How do you create a functional component in React Can you give an example
 
 import React from "react";

export default function Sample() {
  return (
    <h1>Hello</h1>
  );
}

----------------------------------------------------------------------------------------------------------------------
What are the key differences between a class component and a functional component

| Feature           | Class Component                                    | Functional Component                     |
| ----------------- | -------------------------------------------------- | ---------------------------------------- |
| Syntax            | `class extends React.Component`                    | Plain function                           |
| State Handling    | `this.state`, `this.setState()`                    | `useState()` hook                        |
| Lifecycle Methods | `componentDidMount`, `shouldComponentUpdate`, etc. | `useEffect()` and other hooks            |
| `this` keyword    | Required                                           | Not used                                 |
| Performance       | Slightly heavier                                   | Lighter and preferred                    |
| Modern Usage      | Older pattern                                      | Recommended in modern React (with hooks) |

class MyComponent extends React.Component {
  state = { count: 0 };

  render() {
    return <p>{this.state.count}</p>;
  }
}
----------------------------------------------------------------------------------------------------------------------
How do you pass data from a parent component to a child component

In React, data is passed from a parent to a child component using props.
Props are custom attributes on JSX tags.

You can pass:
Strings, numbers, booleans
Objects and arrays
Functions (including callbacks)
Even state values

function Parent() {
  const name = "Madhu";
  const handleClick = () => alert("Hello from parent!");

  return <Child name={name} onClick={handleClick} />;
}

function Child({ name, onClick }) {
  return (
    <div>
      <p>{name}</p>
      <button onClick={onClick}>Click Me</button>
    </div>
  );
}

----------------------------------------------------------------------------------------------------------------------
What are props in React How are they used

Props (short for properties) are read-only inputs passed from a parent component to a child component.
They allow data sharing between components and help build reusable components.

Key Points:
Props are passed as attributes to child components
Props can be strings, numbers, arrays, objects, or functions
Props are immutable (child cannot change them)
Commonly used to render dynamic content or call parent functions from the child
----------------------------------------------------------------------------------------------------------------------
How do you manage state in a functional component

In functional components, we manage state using the useState hook.
useState allows you to declare a state variable and a function to update it.
React will automatically re-render the component whenever the state changes.
----------------------------------------------------------------------------------------------------------------------
Can you explain the difference between state and props

|  Feature   |  `state`                                            |  `props`                                     |
| ------------ | ----------------------------------------------------- | ---------------------------------------------- |
| Purpose      | Manages **local data** inside a component             | Used to **pass data** from **parent to child** |
| Mutable     |  Yes (can be updated using `setState` or `useState`) |  No (read-only)                               |
| Scope        | Local to the component where it's defined             | Passed into the component                      |
| Who sets it | The component itself                                  | The parent component                           |
| Usage        | Dynamic UI, input handling, toggles, etc.             | Passing configuration, values, and callbacks   |

State = local, mutable
Props = external, read-only
----------------------------------------------------------------------------------------------------------------------
What are React Hooks Can you name a few commonly used ones

React Hooks are special functions introduced in React 16.8 that allow functional components to use state and other React features like lifecycle methods — without writing a class.

| Hook          | Purpose                                                            |
| ------------- | ------------------------------------------------------------------ |
| `useState`    | Adds **local state** to a functional component                     |
| `useEffect`   | Runs **side effects** like fetching data, setting up subscriptions |
| `useContext`  | Allows access to **global state** from `React.createContext`       |
| `useRef`      | Access DOM elements or store mutable values                        |
| `useMemo`     | **Memoizes values** to avoid recalculating on every render         |
| `useCallback` | Memoizes **functions**, useful in optimizing re-renders            |

----------------------------------------------------------------------------------------------------------------------

How does the useEffect hook work Can you give an example of its usage

The useEffect hook lets you run side effects in functional components — like:
Fetching data from an API
Subscribing to events
Setting timers
Updating the DOM manually
It runs after the component renders, and you can also use it for cleanup.

import { useEffect, useState } from "react";

function UserList() {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/api/user")
      .then((res) => res.json())
      .then((data) => {
        setUsers(data);
        setLoading(false);
      })
      .catch((err) => {
        setError(err.message);
        setLoading(false);
      });
  }, []); // run once on mount

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

----------------------------------------------------------------------------------------------------------------------
What is the purpose of the useState hook

useState is a hook in React that allows you to create and manage local state in functional components.
It returns a state variable and a function to update that state.

----------------------------------------------------------------------------------------------------------------------
How do you handle events in React, such as a button click

In React, we handle events using JSX attributes like onClick, onChange, onMouseOver, etc.
These events are part of React’s SyntheticEvent system, which wraps around the browser’s native events for better performance and cross-browser compatibility.

Syntax:
<button onClick={handleClick}>Click Me</button>
Event names use camelCase (e.g., onClick)
You pass a function (not a string) to the event handler

function Counter() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
  };

  return (
    <div>
      <p>Clicked: {count} times</p>
      <button onClick={handleClick}>Click Me</button>
    </div>
  );
}
----------------------------------------------------------------------------------------------------------------------
Can you explain how to prevent the default behavior of an event in React

In React, to prevent the default behavior of an event (like a form submitting and reloading the page), we use:

event.preventDefault();
This is a method available on the SyntheticEvent object passed to the event handler.
----------------------------------------------------------------------------------------------------------------------
How do you render a list of items in React

In React, we render lists using the Array.prototype.map() method.
Each element in the list must have a unique key to help React identify which items changed, added, or removed.

function UserList({ users }) {
  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}

****************************************JS Es6******************************************************************************
 What is the difference between var, let, and const
 
In JavaScript, var, let, and const are used to declare variables, but they differ in scope, hoisting, and reassignment behavior.

1. var:
********
 Function-scoped (not block-scoped)
 Can be re-declared and updated
 Is hoisted (moved to the top of its scope with undefined)
 Not recommended in modern code

var name = "Madhu";
var name = "Raj"; // valid


 2. let:
 ********

 Block-scoped
 Cannot be re-declared in the same scope
 Can be updated
 Hoisted but not initialized (will throw error if used before declaration)

let age = 25;
age = 30;      //  valid
let age = 40;  //  SyntaxError

 3. const:
 **********
 
 Block-scoped
 Cannot be re-declared or updated
 Must be initialized at the time of declaration
 However, object contents can be mutated

const pi = 3.14;
// pi = 3.15;  TypeError

const user = { name: "Madhu" };
user.name = "Raj"; //  allowed (object mutation)

----------------------------------------------------------------------------------------------------------------------------------
What are arrow functions in ES6 and how are they different from regular functions?

Arrow functions (introduced in ES6) are a shorter syntax for writing functions.
They also do not bind their own this context, which makes them useful in certain cases like event handlers or callbacks.

| Feature               | Arrow Function                              | Regular Function                             |
| --------------------- | ------------------------------------------- | -------------------------------------------- |
| `this` Binding        | **Lexical** (`this` comes from outer scope) | **Dynamic** (`this` changes based on caller) |
| Syntax                | Shorter                                     | More verbose                                 |
| `arguments` object    | Not available                             | Available                                  |
| Usable as constructor | No                                        | Yes                                        |

In React:
Yes, arrow functions are commonly used for:
Functional components
Event handlers
Callbacks in props

const Greet = () => <h1>Hello</h1>;
----------------------------------------------------------------------------------------------------------------------------------
What is destructuring in ES6Can you give examples for both objects and arrays?

Destructuring in ES6 is a way to unpack values from arrays or properties from objects into distinct variables.
It's very common in React — especially when working with props or state.

const user = { name: "Madhu", age: 25 };
const { name, age } = user;
console.log(name); // "Madhu"
console.log(age);  // 25
----------------------------------------------------------------------------------------------------------------------------------
What are template literals in ES6 and how are they useful?

Template literals (introduced in ES6) are strings enclosed in backticks (`) instead of quotes.
They allow:
Embedding variables using ${}
Multiline strings
Expression evaluation

const name = "Madhu";
const greeting = `Hello, ${name}!`;
console.log(greeting); // Hello, Madhu!

----------------------------------------------------------------------------------------------------------------------------------
What is the difference between the spread (...) and rest (...) operators in ES6?

Both spread (...) and rest (...) use the same syntax, but their purpose depends on the context:
Spread is used to expand or unpack values.
Rest is used to collect or pack values.

 1. Spread Operator — Expands elements (arrays/objects)
***********************************
// Array example
const nums = [1, 2, 3];
const newNums = [...nums, 4, 5];

console.log(newNums); // [1, 2, 3, 4, 5]

// Object example
const user = { name: "Madhu", age: 25 };
const updatedUser = { ...user, location: "Bangalore" };

console.log(updatedUser); 
// { name: 'Madhu', age: 25, location: 'Bangalore' }

 2. Rest Operator — Groups multiple values into a single variable
***********************************
// Array destructuring
const [first, ...rest] = [1, 2, 3, 4];
console.log(first); // 1
console.log(rest);  // [2, 3, 4]

// Object destructuring
const { name, ...others } = { name: "Madhu", age: 25, city: "BLR" };
console.log(name);   // "Madhu"
console.log(others); // { age: 25, city: "BLR" }

----------------------------------------------------------------------------------------------------------------------------------

What are default parameters in JavaScriptHow do they work?

Default parameters in JavaScript (introduced in ES6) allow you to set default values for function arguments.
If a value is not passed (or is undefined), the default is used.

function greet(name = "Guest") {
  return `Hello, ${name}`;
}
console.log(greet("Madhu")); // "Hello, Madhu"
console.log(greet());        // "Hello, Guest"
----------------------------------------------------------------------------------------------------------------------------------
What is object shorthand and computed property names in ES6?

1. Object Property Shorthand
When the key name and variable name are the same, ES6 allows you to skip writing them twice.

Example:

const name = "Madhu";
const age = 25;

// Old way:
const user1 = {
  name: name,
  age: age,
};

// ES6 shorthand:
const user2 = {
  name,
  age,
};

console.log(user2); // { name: "Madhu", age: 25 }
Used a lot in React when passing props or creating state objects.

2. Computed Property Names
You can use dynamic property keys inside an object using square brackets [].

Example:

const key = "city";

const user = {
  name: "Madhu",
  [key]: "Bangalore", // key = "city"
};

console.log(user); // { name: "Madhu", city: "Bangalore" }
Very useful when working with dynamic form fields, API keys, or handling state updates in React:
setFormData({ ...formData, [fieldName]: value });

----------------------------------------------------------------------------------------------------------------------------------
What is optional chaining (?.) and how does it help in React?

Optional chaining (?.) is an ES2020 feature that allows you to safely access nested properties in an object without causing runtime errors.
If any part of the chain is null or undefined, it will return undefined instead of throwing an error.

const user = {
  name: "Madhu",
  address: {
    city: "Bangalore",
  },
};
console.log(user.address.city);        // ? "Bangalore"
console.log(user.profile?.age);        // ? undefined (instead of error)

Without optional chaining:
console.log(user.profile.age); // ? Error: Cannot read properties of undefined

| Use Case              | Example                |
| --------------------- | ---------------------- |
| Safe object access    | `user?.profile?.email` |
| Safe array access     | `items?.[0]?.name`     |
| Safe function calling | `user?.getDetails?.()` |
----------------------------------------------------------------------------------------------------------------------------------

What is the difference between map, filter, and forEach in JavaScript?

| Method      | Purpose                       | Returns       | Can Modify Array? | Common Use Case             |
| ----------- | ----------------------------- | ------------- | ----------------- | --------------------------- |
| `map()`     | Transforms each item          | ? New array   | ? No              | Modify data for UI          |
| `filter()`  | Filters items based on a test | ? New array   | ? No              | Remove unwanted data        |
| `forEach()` | Executes a function per item  | ? `undefined` | ? No              | Side effects (like logging) |

map()
*****
const nums = [1, 2, 3];
const doubled = nums.map(n => n * 2);
console.log(doubled); // [2, 4, 6]

filter() — Filters based on condition:
***********
const nums = [1, 2, 3, 4];
const even = nums.filter(n => n % 2 === 0);
console.log(even); // [2, 4]

forEach() — Just runs a function for each item:
***************************
const nums = [1, 2, 3];
nums.forEach(n => console.log(n * 2)); // Just prints values

----------------------------------------------------------------------------------------------------------------------------------

npx create-react-app my-app
cd my-app
npm start
npm install react-router-dom
npm run build

----------------------------------------------------------------------------------------------------------------------------------
Why some components are imported with {} and some without?

| Export Type        | Syntax in File                          | Import Syntax           |
| ------------------ | --------------------------------------- | ----------------------- |
| **Default Export** | `export default Component`              | `import Component from` |
| **Named Export**   | `export const x = ...` / `function x()` | `import { x } from`     |

----------------------------------------------------------------------------------------------------------------------------------
You’ve been asked to build a simple counter component in React.
It should have:
A button to increase the count.
Display of the current count.
?? Can you implement this using React functional components and the useState hook?
Please write the complete code.

import React, {useState} from "react";

export default function Counter(){

    const [count, setCount] = useState(0);

    const handleClick = (event) => {
        event.preventDefault();
        setCount( count +1);
    }

    return(
        <button onClick={handleClick}>click me</button>
    );

}

----------------------------------------------------------------------------------------------------------------------------------
import React, {useEffect, useState} from "react";

export default function Counter(){

    const [users, setUsers] = useState([]);
    const [error, setError] = useState(null);
    const [islogging, setIsLogging] = useState(true);

   useEffect( () => {
    fetch("https://jsonplaceholder.typicode.com/users")
    .then(res => res.json())
    .then(user => setUsers(user))
    .catch(error => setError(error))
    .finally(setIsLogging(false))
   },[])

   {islogging && <p>Loading....</p>}
   {error == null && <p>Pageerror...</p>}

    return(
        <ul>
            {users.map( (user) => {
                <li key={user.id}>{user.name}</li>
            } )}
        </ul>
    );

}

----------------------------------------------------------------------------------------------------------------------------------
import React, {useEffect, useState} from "react";

export default function ParentComponent(){

    const [message, setMessage] = useState("Hello from Parent");

    const handleMessage = () => setMessage("Updated by Child")

    return(
        <div>
            <h1>{message}</h1>
             <ChildComponent props={message} handMessage={handleMessage}/>
        </div>
    );

}

const ChildComponent = ({props, handMessage}) => {
        <div>
            <h1>{props.message}</h1>
            <button onClick={handMessage}/>
        </div>
}

----------------------------------------------------------------------------------------------------------------------------------

import React, {useEffect, useState} from "react";

export default function ParentComponent(){

    const [name, setName] = useState();

    const handleName = (n) => {
        console.log(n)
        setName(n);
    }

    return(
             <ChildComponent nameHandler={handleName}/>
    );

}

const ChildComponent = (nameHandler) => {
        <div>
            <label>Name : </label>
            <input type="text" placeholder="names" onChange={(e) => nameHandler(e.target.value)}/>
        </div>
}
--------------------------------------------------------------------------------------------------------------------------------

