Functional Interface :-
--------------------
An interface that contains exactly one abstract method. 
It can have default and static methods, but only one abstract method. 
Functional interfaces are used to support lambda expressions and method references, which are key features for enabling functional programming paradigms in Java. 

The @FunctionalInterface annotation can be used to explicitly declare an interface as a functional interface. While not mandatory, it's good practice as it helps the compiler catch errors 
if the interface doesn't conform to the rules of a functional interface (i.e., having exactly one abstract method). 

Common examples of functional interfaces in Java include Runnable, Callable, Predicate, Function, Consumer, and Supplier, all found in the java.util.function package.
---------------------------------------------------------------------------------------------------------------------
Lambda Expressions :-
-----------------------
A lamba expression is a compact way of defining anonymous methods in java.
Reduces boilerplate code.
Enables functional programming, focusing on what to do rather than how to do it.
Lamba expressions are tightly coupled with Functional interface, with out FI we can't implement LE's
LE implemtation is nothing but anonymous method implementation.

Paramter types : Java infers types, so they are not mandatory.
Parentheses: For single paramters, Parentheses can be omitted.
Return: Single line expressions auto return values.
void: if the lambda body performs an action and doesn't return a value, it automatically adapts to a void return type.
---------------------------------------------------------------------------------------------------------------------
Predicate FI :- (filter)
-----------------------
the Predicate interface is a part of the java.util.function package and represents a single argument function that returns a boolean value. 
It's used to evaluate a condition on a given input. The Predicate functional interface is often used in situations where you need to filter, test, or validate data.

boolean test(T t);

Key Characteristics of Predicate:
It takes one argument of a specific type and returns a boolean result.
It's a functional interface, meaning it can be used in lambda expressions and method references.

Chaining Predicates:
You can also combine multiple predicates using the default methods and(), or(), and negate() provided by the Predicate interface.
and(): Returns a predicate that represents the logical AND of two predicates.
or(): Returns a predicate that represents the logical OR of two predicates.
negate(): Returns a predicate that negates the result of the original predicate.
---------------------------------------------------------------------------------------------------------------------
Function FI :- (map)
-----------------------
The Function interface is a functional interface in the java.util.function package.
It represents a function that takes an argument of type T and returns a result of type R. 
The Function interface is commonly used in Java to represent transformations, mapping operations, or any computation where you convert one type into another.
R apply(T t);
The interface has a single method, apply(), which takes one argument of type T and returns a result of type R

Default Methods in Function Interface:
The Function interface provides several default methods that allow you to compose functions in a fluent manner. 
These methods are:

andThen(): It allows you to chain another function to the result of the current function.
Syntax: Function<T, R> andThen(Function<? super R, ? extends V> after)
The function is applied first, and then the after function is applied to the result

compose(): It allows you to chain another function to the input of the current function.
Syntax: Function<T, R> compose(Function<? super V, ? extends T> before)
The before function is applied first, and then the function is applied to the result.

identity(): Returns a function that always returns its input argument.
Syntax: static <T> Function<T, T> identity()
---------------------------------------------------------------------------------------------------------------------
Consumer FI :- (forEach)
-----------------------
The Consumer interface is part of the java.util.function package, and it represents an operation that takes a single input argument of type T and returns no result.
It's typically used for operations that produce side effects, like printing values, updating external states, or modifying objects.
void accept(T t);
It has a single method accept(), which takes one argument of type T and performs some operation with it without returning a result (i.e., it returns void).

the Consumer interface in Java provides two important default methods that enable you to chain multiple consumers in a fluent and functional programming style. These methods are:

Default Methods in Consumer Interface:
1. andThen():
The andThen() method allows you to chain another Consumer to the current one. It returns a new Consumer that first applies the current Consumer's action and 
then applies the action of the after Consumer.
2. identity() (Static Method):
This method returns a Consumer that simply performs the identity operation on its input. That is, it accepts the argument and does nothing with it (i.e., it doesnâ€™t modify or affect the input). This is useful in certain cases where you might need a Consumer that doesn't change the input.
---------------------------------------------------------------------------------------------------------------------

