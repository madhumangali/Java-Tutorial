What is Spring JDBC, and how is it different from traditional JDBC?

Spring JDBC is a part of the Spring Framework that simplifies database interactions using JDBC (Java Database Connectivity). 
It provides a higher-level abstraction over traditional JDBC, making it easier to work with relational databases by reducing boilerplate code and 
improving exception handling.

Feature	                             Traditional JDBC	Spring                                                 JDBC
--------------                       ------------------------                                            ------------------
Boilerplate Code	    Requires a lot of code (connection handling, statement creation, result set processing, exception handling).	Reduces boilerplate with templates (JdbcTemplate).
Exception Handling	  Throws checked SQL exceptions, forcing explicit handling.	               Converts SQL exceptions into unchecked exceptions (DataAccessException).
Resource Management	  Requires manual closing of Connection, Statement, and ResultSet.	       Automatically manages resources (closes connections).
Transaction Management	Requires manual transaction handling via commit() and rollback().	     Supports declarative transaction management via Spring.
Code Complexity        	More complex and error-prone.	                                         Cleaner and more readable.
ORM Support	            No built-in ORM support.	                                             Works well with Spring JPA, Hibernate.

-------------------------------
import java.sql.*;

public class TraditionalJDBCExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String user = "root";
        String password = "password";
        String query = "SELECT * FROM employees";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                System.out.println(rs.getInt("id") + " " + rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

-------------------------------------------------------------------------------------------------------------
Explain the role of JdbcTemplate in Spring JDBC?

JdbcTemplate is the central class in Spring JDBC that simplifies database interactions by managing resource handling, executing SQL queries, and handling exceptions. 
It eliminates boilerplate code needed in traditional JDBC, making database access cleaner and more efficient.

Problems with Traditional JDBC
Requires manual handling of connections, statements, and result sets.
Checked exceptions (SQLException) make error handling cumbersome.
Writing repetitive boilerplate code for transactions and query execution.

How JdbcTemplate Solves These Issues
✅ Manages connections automatically → No need to open/close resources.
✅ Converts SQLException into unchecked DataAccessException → Simplifies exception handling.
✅ Reduces boilerplate code → More readable and maintainable.
✅ Supports transactions and integrates well with Spring ORM and JPA.

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import javax.sql.DataSource;

public class JdbcTemplateExample {
    public static void main(String[] args) {
        // Create DataSource
        DataSource dataSource = new DriverManagerDataSource(
            "jdbc:mysql://localhost:3306/mydb", "root", "password"
        );

        // Create JdbcTemplate instance
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);

        // Use JdbcTemplate to perform DB operations
        String name = jdbcTemplate.queryForObject("SELECT name FROM employees WHERE id = ?", 
                                                  new Object[]{1}, String.class);
        System.out.println("Employee Name: " + name);
    }
}

Commonly Used Methods in JdbcTemplate
Method	                                          Purpose	                                                                                    Example
update(String sql, Object... args)	    Executes INSERT, UPDATE, DELETE queries	                                      jdbcTemplate.update("INSERT INTO employees (name) VALUES (?)", "John")
queryForObject(String sql, Class<T> requiredType, Object... args)	Returns a single value (e.g., COUNT(*), name by ID)	jdbcTemplate.queryForObject("SELECT name FROM employees WHERE id = ?", String.class, 1)
queryForList(String sql, Class<T> elementType, Object... args)	Returns a list of values	                            jdbcTemplate.queryForList("SELECT name FROM employees", String.class)
query(String sql, RowMapper<T> rowMapper, Object... args)	Maps result set rows to objects	                            jdbcTemplate.query("SELECT * FROM employees", new EmployeeRowMapper())
batchUpdate(String sql, List<Object[]> batchArgs)	Executes batch operations	                                          jdbcTemplate.batchUpdate("INSERT INTO employees (name) VALUES (?)", batchArgs)

-------------------------------------------------------------------------------------------------------------
How do you handle transactions in Spring JDBC?

Spring JDBC makes transaction management easy!

✅ Use @Transactional for most cases (automatic rollback on errors).
✅ Use TransactionTemplate or DataSourceTransactionManager for finer control.
✅ Use REQUIRES_NEW for independent transactions within a method.
-------------------------------------------------------------------------------------------------------------

Key Differences: RowMapper vs. ResultSetExtractor

Feature	                        RowMapper	                                ResultSetExtractor
--------------                --------------                                --------------
Processing Approach	            Row-by-row	                           Entire result set at once
Return Type	              A single object per row (List of objects)	   A single object (can be a collection)
Best For	                Simple row-to-object mapping	               Complex processing (aggregates, nested structures)
Example Use Case	        Fetching employee list	                     Grouping employees by department

-------------------------------------------------------------------------------------------------------------
Explain exception handling in Spring JDBC?

✅ No Need to Handle SQLException Manually → Spring automatically translates SQL exceptions.
✅ Consistent API → Uses DataAccessException, a runtime exception, so no need for throws SQLException.
✅ Easier Debugging → Provides a clear hierarchy of exceptions (e.g., DuplicateKeyException).
✅ Database-Vendor Independence → Works across different databases (MySQL, PostgreSQL, etc.).

All exceptions extend DataAccessException (an unchecked exception):

BadSqlGrammarException	                SQL syntax error
--------------                          --------------
DuplicateKey                            Exception	Unique constraint violation
DataIntegrityViolationException	        Foreign key constraint failure
EmptyResultDataAccessException	        Query expected at least one result, but got none
IncorrectResultSizeDataAccessException	Query returned more or fewer results than expected
CannotGetJdbcConnectionException	      Database connection failure

-------------------------------------------------------------------------------------------------------------

What is JPA?
JPA (Java Persistence API) is a specification for managing relational data in Java applications.
It defines a standard set of APIs for object-relational mapping (ORM) but does not provide an actual implementation.

Key Features of JPA
✔️ Provides annotations for entity mapping (@Entity, @Table, @Column, etc.)
✔️ Defines standard APIs for CRUD operations (EntityManager)
✔️ Supports JPQL (Java Persistence Query Language)
✔️ Works with various ORM frameworks (Hibernate, EclipseLink, OpenJPA)

JPA is just a set of rules; it needs an ORM provider (like Hibernate) to work.

What is Hibernate?
Hibernate is a JPA implementation (an ORM framework) that provides the actual functionality for managing database interactions.

Key Features of Hibernate
✔️ Implements JPA specification
✔️ Provides additional features beyond JPA (Caching, Lazy Loading, Batch Processing)
✔️ Supports both HQL (Hibernate Query Language) and JPQL
✔️ Allows native SQL queries

Hibernate = JPA + Extra Features

    +----------------------+
          |      Application     |
          +----------------------+
                     │
                     ▼
          +----------------------+
          |    JPA (Specification) |
          |  (javax.persistence)  |
          +----------------------+
                     │
     --------------------------------
     |                              |
     ▼                              ▼
+------------------+        +------------------+
|  Hibernate ORM  |        |  EclipseLink ORM |
| (JPA Provider) |        | (JPA Provider)  |
+------------------+        +------------------+
         │
         ▼
+---------------------------+
|    EntityManager (JPA)    |
| or SessionFactory (Hibernate) |
+---------------------------+
         │
         ▼
+---------------------------+
|       Database (SQL)      |
+---------------------------+

-------------------------------------------------------------------------------------------------------------










































































