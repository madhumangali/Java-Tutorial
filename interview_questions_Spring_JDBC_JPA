What is Spring JDBC, and how is it different from traditional JDBC?

Spring JDBC is a part of the Spring Framework that simplifies database interactions using JDBC (Java Database Connectivity). 
It provides a higher-level abstraction over traditional JDBC, making it easier to work with relational databases by reducing boilerplate code and 
improving exception handling.

Feature	                             Traditional JDBC	Spring                                                 JDBC
--------------                       ------------------------                                            ------------------
Boilerplate Code	    Requires a lot of code (connection handling, statement creation, result set processing, exception handling).	Reduces boilerplate with templates (JdbcTemplate).
Exception Handling	  Throws checked SQL exceptions, forcing explicit handling.	               Converts SQL exceptions into unchecked exceptions (DataAccessException).
Resource Management	  Requires manual closing of Connection, Statement, and ResultSet.	       Automatically manages resources (closes connections).
Transaction Management	Requires manual transaction handling via commit() and rollback().	     Supports declarative transaction management via Spring.
Code Complexity        	More complex and error-prone.	                                         Cleaner and more readable.
ORM Support	            No built-in ORM support.	                                             Works well with Spring JPA, Hibernate.

-------------------------------
import java.sql.*;

public class TraditionalJDBCExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/mydb";
        String user = "root";
        String password = "password";
        String query = "SELECT * FROM employees";

        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                System.out.println(rs.getInt("id") + " " + rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

-------------------------------------------------------------------------------------------------------------
Explain the role of JdbcTemplate in Spring JDBC?

JdbcTemplate is the central class in Spring JDBC that simplifies database interactions by managing resource handling, executing SQL queries, and handling exceptions. 
It eliminates boilerplate code needed in traditional JDBC, making database access cleaner and more efficient.

Problems with Traditional JDBC
Requires manual handling of connections, statements, and result sets.
Checked exceptions (SQLException) make error handling cumbersome.
Writing repetitive boilerplate code for transactions and query execution.

How JdbcTemplate Solves These Issues
✅ Manages connections automatically → No need to open/close resources.
✅ Converts SQLException into unchecked DataAccessException → Simplifies exception handling.
✅ Reduces boilerplate code → More readable and maintainable.
✅ Supports transactions and integrates well with Spring ORM and JPA.

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import javax.sql.DataSource;

public class JdbcTemplateExample {
    public static void main(String[] args) {
        // Create DataSource
        DataSource dataSource = new DriverManagerDataSource(
            "jdbc:mysql://localhost:3306/mydb", "root", "password"
        );

        // Create JdbcTemplate instance
        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);

        // Use JdbcTemplate to perform DB operations
        String name = jdbcTemplate.queryForObject("SELECT name FROM employees WHERE id = ?", 
                                                  new Object[]{1}, String.class);
        System.out.println("Employee Name: " + name);
    }
}

Commonly Used Methods in JdbcTemplate
Method	                                          Purpose	                                                                                    Example
update(String sql, Object... args)	    Executes INSERT, UPDATE, DELETE queries	                                      jdbcTemplate.update("INSERT INTO employees (name) VALUES (?)", "John")
queryForObject(String sql, Class<T> requiredType, Object... args)	Returns a single value (e.g., COUNT(*), name by ID)	jdbcTemplate.queryForObject("SELECT name FROM employees WHERE id = ?", String.class, 1)
queryForList(String sql, Class<T> elementType, Object... args)	Returns a list of values	                            jdbcTemplate.queryForList("SELECT name FROM employees", String.class)
query(String sql, RowMapper<T> rowMapper, Object... args)	Maps result set rows to objects	                            jdbcTemplate.query("SELECT * FROM employees", new EmployeeRowMapper())
batchUpdate(String sql, List<Object[]> batchArgs)	Executes batch operations	                                          jdbcTemplate.batchUpdate("INSERT INTO employees (name) VALUES (?)", batchArgs)

-------------------------------------------------------------------------------------------------------------
How do you handle transactions in Spring JDBC?

Spring JDBC makes transaction management easy!

✅ Use @Transactional for most cases (automatic rollback on errors).
✅ Use TransactionTemplate or DataSourceTransactionManager for finer control.
✅ Use REQUIRES_NEW for independent transactions within a method.
-------------------------------------------------------------------------------------------------------------

Key Differences: RowMapper vs. ResultSetExtractor

Feature	                        RowMapper	                                ResultSetExtractor
--------------                --------------                                --------------
Processing Approach	            Row-by-row	                           Entire result set at once
Return Type	              A single object per row (List of objects)	   A single object (can be a collection)
Best For	                Simple row-to-object mapping	               Complex processing (aggregates, nested structures)
Example Use Case	        Fetching employee list	                     Grouping employees by department

-------------------------------------------------------------------------------------------------------------
Explain exception handling in Spring JDBC?

✅ No Need to Handle SQLException Manually → Spring automatically translates SQL exceptions.
✅ Consistent API → Uses DataAccessException, a runtime exception, so no need for throws SQLException.
✅ Easier Debugging → Provides a clear hierarchy of exceptions (e.g., DuplicateKeyException).
✅ Database-Vendor Independence → Works across different databases (MySQL, PostgreSQL, etc.).

All exceptions extend DataAccessException (an unchecked exception):

BadSqlGrammarException	                SQL syntax error
--------------                          --------------
DuplicateKey                            Exception	Unique constraint violation
DataIntegrityViolationException	        Foreign key constraint failure
EmptyResultDataAccessException	        Query expected at least one result, but got none
IncorrectResultSizeDataAccessException	Query returned more or fewer results than expected
CannotGetJdbcConnectionException	      Database connection failure

-------------------------------------------------------------------------------------------------------------

What is JPA?
JPA (Java Persistence API) is a specification for managing relational data in Java applications.
It defines a standard set of APIs for object-relational mapping (ORM) but does not provide an actual implementation.

Key Features of JPA
✔️ Provides annotations for entity mapping (@Entity, @Table, @Column, etc.)
✔️ Defines standard APIs for CRUD operations (EntityManager)
✔️ Supports JPQL (Java Persistence Query Language)
✔️ Works with various ORM frameworks (Hibernate, EclipseLink, OpenJPA)

JPA is just a set of rules; it needs an ORM provider (like Hibernate) to work.

What is Hibernate?
Hibernate is a JPA implementation (an ORM framework) that provides the actual functionality for managing database interactions.

Key Features of Hibernate
✔️ Implements JPA specification
✔️ Provides additional features beyond JPA (Caching, Lazy Loading, Batch Processing)
✔️ Supports both HQL (Hibernate Query Language) and JPQL
✔️ Allows native SQL queries

Hibernate = JPA + Extra Features

    +----------------------+
          |      Application     |
          +----------------------+
                     │
                     ▼
          +----------------------+
          |    JPA (Specification) |
          |  (javax.persistence)  |
          +----------------------+
                     │
     --------------------------------
     |                              |
     ▼                              ▼
+------------------+        +------------------+
|  Hibernate ORM  |        |  EclipseLink ORM |
| (JPA Provider) |        | (JPA Provider)  |
+------------------+        +------------------+
         │
         ▼
+---------------------------+
|    EntityManager (JPA)    |
| or SessionFactory (Hibernate) |
+---------------------------+
         │
         ▼
+---------------------------+
|       Database (SQL)      |
+---------------------------+

-------------------------------------------------------------------------------------------------------------

What are the key annotations used in Spring Data JPA?

Spring Data JPA annotations make database interactions simple and declarative.
Using these annotations, you can easily define entities, relationships, queries, and auditing features without writing boilerplate code.

Annotation	                                             Description
@Entity	                                                Marks a class as a JPA entity.
@Table(name = "table_name")	                            Specifies a custom table name.
@Id	                                                    Defines the primary key.
@GeneratedValue(strategy = GenerationType.IDENTITY)   	Auto-generates primary key values.
@Column(name = "column_name")	                        Customizes column mapping.
@Transient	                                            Excludes a field from persistence.
@OneToOne	                                            One-to-one relationship.
@OneToMany	                                            One-to-many relationship.
@ManyToOne	                                            Many-to-one relationship.
@ManyToMany                                          	Many-to-many relationship.
@JoinColumn(name = "column_name")	                    Defines a foreign key column.
@Query	                                                Custom JPQL/SQL query.
@NamedQuery	                                            Predefined JPQL query.
@Modifying	                                            Used for update/delete queries.
@CreatedDate	                                        Stores entity creation timestamp.
@LastModifiedDate	                                    Stores last update timestamp.
@CreatedBy	                                            Tracks the user who created the entity.
@LastModifiedBy	                                        Tracks the user who modified the entity.
@Repository	                                            Marks a repository interface.
@EnableJpaRepositories	                                Enables JPA repositories
-------------------------------------------------------------------------------------------------------------
Explain the difference between EntityManager and Session in JPA?

Feature	                         EntityManager (JPA)	                      Session (Hibernate)
API	                     Part of JPA (javax.persistence.EntityManager)	Part of Hibernate (org.hibernate.Session)
Standardization	         Standard JPA API (vendor-independent)	        Hibernate-specific (vendor-dependent)
Persistence Context	     Uses persistence context to manage entities	Uses Hibernate session cache
Transactions	         em.getTransaction().begin()	                session.beginTransaction()
Saving Entities	         em.persist(entity)	                            session.save(entity) or session.persist(entity)
Query Language	         Uses JPQL (Java Persistence Query Language)	Supports JPQL, HQL (Hibernate Query Language), and native SQL
Caching	                 Only first-level cache (per EntityManager)	    First-level cache (Session) and Second-level cache (SessionFactory)
Lazy Loading	         Limited support	                            Fully supports lazy loading
Batch Processing	     No built-in batch processing	                Supports batch processing for better performance

-------------------------------------------------------------------------------------------------------------
What is the purpose of the @Transactional annotation?

The @Transactional annotation in Spring is used to manage database transactions automatically. It ensures that a set of database operations execute as a single unit of work—either all succeed (commit) 
or all fail (rollback) in case of an error.

When NOT to Use @Transactional
On DAO/Repository layer → Spring Data JPA already manages transactions.
For read-only operations → Use @Transactional(readOnly = true) to optimize.
On private methods → @Transactional works only on public methods (due to Spring AOP proxy limitations).
-------------------------------------------------------------------------------------------------------------
What is the difference between findById() and getOne() in JPA?

findById(ID id) (Eager Loading)
findById() is defined in JpaRepository and returns an Optional<T>.
It immediately queries the database and fetches the entity.
If the entity is not found, it returns Optional.empty() instead of throwing an exception.

getOne(ID id) (Lazy Loading)
getOne() is defined in JpaRepository and returns the entity directly.
It does NOT query the database immediately. Instead, it returns a proxy object (Hibernate LazyInitializationException might occur if accessed outside a transaction).
The actual database query happens only when the entity’s properties are accessed.
-------------------------------------------------------------------------------------------------------------
Explain the concept of Lazy and Eager fetching in JPA.

Feature	              Lazy (FetchType.LAZY)	                                                   Eager (FetchType.EAGER)
--------                 --------                                                                --------
Loading Strategy	Loads related entity on-demand	                                            Loads related entity immediately
Query Performance	Executes separate queries when accessed                                     Uses JOIN to fetch all data
Memory Usage	    Efficient, loads only required data	                                        Can be heavy if unnecessary data is loaded
Default Fetching	@OneToMany, @ManyToMany	                                                    @OneToOne, @ManyToOne
Risk of LazyInitializationException	 Yes (if accessed outside a transaction)	                     No (always fetched with main entity)
Best Use Case	     Large datasets, rarely used relationships	                                 Frequently used relationships

-------------------------------------------------------------------------------------------------------------
How do you write custom queries in Spring Data JPA?

Spring Data JPA provides multiple ways to write custom queries when predefined methods (like findById() or findAll()) are not sufficient.

Approach	                                                    Use Case
----------------                                            ----------------
@Query (JPQL)	                                    Custom queries with entity fields (Most common)
Native SQL (@Query(nativeQuery = true))	            When using DB-specific queries
Method Name Query Derivation	                    Simple queries (Auto-generated by Spring)
Named Queries (@NamedQuery)	                        Predefined queries in entity class
@Modifying for Update/Delete	                    Update and delete operations
Specification API	                                Dynamic queries with multiple filters
EntityManager	                                    Full control over query execution
-------------------------------------------------------------------------------------------------------------
What is the difference between save() and saveAndFlush() in JPA?

Both save() and saveAndFlush() are methods provided by Spring Data JPA's JpaRepository, but they behave differently in terms of transaction handling and persistence timing.

save()
Saves the entity but does not immediately flush changes to the database.
The data is persisted only when the transaction is committed (or explicitly flushed).
Uses Hibernate’s first-level cache, meaning changes might not be visible to other transactions until committed.
saveAndFlush()
Saves the entity and immediately flushes changes to the database.
Calls EntityManager.flush(), forcing Hibernate to synchronize changes with the database.
Can be useful when you need immediate database consistency (e.g., when executing queries that rely on recent changes).

-------------------------------------------------------------------------------------------------------------
How do you implement pagination in Spring Data JPA?

Spring Data JPA provides built-in support for pagination and sorting using the Pageable and Page interfaces.

getAllApp(@PageableDefault(page = 0, size = Integer.MAX_VALUE)@ParameterObject Pageable pageable)
Returns a Page<Employee> instead of List<Employee>.
Pageable contains page number, size, and sorting.

-------------------------------------------------------------------------------------------------------------

Relationship	Where to Use @JoinColumn	Foreign Key Location
@OneToOne	On the owning side	            In the table of the entity with @JoinColumn
@ManyToOne	On the owning side	            In the child (many-side) table
@OneToMany	No @JoinColumn, use mappedBy	In the many-side table
@ManyToMany	In @JoinTable	                In an extra join table

-------------------------------------------------------------------------------------------------------------
How does Spring JPA handle transactions automatically?

1️⃣ Transactions are required for database operations (Insert, Update, Delete).
2️⃣ Spring Boot enables transaction management automatically with @Transactional.
3️⃣ By default, Spring JPA uses the "commit" strategy – commits the transaction if no exception occurs.
4️⃣ Rollback happens automatically for runtime exceptions (RuntimeException, UncheckedException).

-------------------------------------------------------------------------------------------------------------
What are entity lifecycle callbacks in JPA?

Annotation	          When to Use?	                Example Use Case
----------        -------------------              -------------------
@PrePersist	    Before inserting a new record	    Set createdAt timestamp
@PostPersist	After inserting a new record	    Log "Employee saved" message
@PreUpdate	    Before updating an existing record	Set updatedAt timestamp
@PostUpdate  	After updating a record	            Log "Employee updated" message
@PreRemove	    Before deleting a record	        Prevent deletion if certain conditions fail
@PostRemove	    After deleting a record	            Log "Employee deleted" message
@PostLoad	    After fetching a record from DB	    Initialize computed fields
-------------------------------------------------------------------------------------------------------------
How do you handle N+1 query issues in JPA?

Fetching 10 Employees, but JPA executes 1 query for employees + 10 queries for departments (N=10) instead of a single join query.

@EntityGraph(attributePaths = {"department"})
@Query("SELECT e FROM Employee e")
List<Employee> findAllWithDepartment();

@Query("SELECT e FROM Employee e JOIN FETCH e.department")
List<Employee> findAllEmployeesWithDepartments();

Solution	                                  Best For	                             Drawback
@EntityGraph                            ✅	Best for single repository calls	   Not flexible for dynamic queries
JOIN FETCH                              ✅	Best for JPQL queries	               Cannot be used in native queries
FetchType.EAGER                         ⚠️	Simple fixes (small datasets)	       May load too much data
hibernate.default_batch_fetch_size      ✅	Best for batch fetching	               Hibernate-specific

-------------------------------------------------------------------------------------------------------------
What is the best way to manage database connections in a high-traffic application using Spring JDBC?

✅ Use HikariCP	Efficient connection pooling for fast performance.
✅ Use JdbcTemplate	Manages connections automatically, preventing leaks.
✅ Use @Transactional	Reduces unnecessary connection overhead.
✅ Use Read-Write Pools	Optimizes DB load for large-scale applications.
✅ Always Close Resources	Avoids memory leaks in plain JDBC.
-------------------------------------------------------------------------------------------------------------
How do you debug and optimize queries in JPA?

Technique	                     Benefit
✅ Enable show-sql and p6spy	Logs real queries and execution time
✅ Fix N+1                      with JOIN FETCH	Reduces excessive queries
✅ Use @EntityGraph	            Optimizes lazy fetching
✅ Add Indexes	                Speeds up searches
✅ Use Pagination (Pageable)	Prevents loading too many records
✅ Use @Modifying               for Batch Updates	Reduces query count
-------------------------------------------------------------------------------------------------------------
How do you prevent SQL injection in Spring JDBC?

Technique	                                          Why?
✅ Use PreparedStatement (? placeholders)	        Prevents direct injection
✅ Use NamedParameterJdbcTemplate	                Improves readability and security
✅ Use @Query with Named Parameters	                Safe in Spring Data JPA
✅ Validate & Sanitize User Input	                Rejects dangerous inputs
✅ Use Hibernate / ORM	                            Automatically prevents injection
✅ Use Least Privilege DB Access	                Limits potential damage
-------------------------------------------------------------------------------------------------------------
What is the best way to handle performance issues in large-scale JPA applications?

Best Practice	                          Why?
✅ Use FetchType.LAZY	              Avoids loading unnecessary data
✅ Fix N+1                           with JOIN FETCH or @EntityGraph	Reduces excessive queries
✅ Use Pagination (Pageable)	      Prevents loading too many records
✅ Enable Batch Inserts (saveAll())	  Improves insert performance
✅ Use Indexes (@Index)	              Speeds up searches
✅ Use EntityManager.clear() inLoops Prevents memory leaks
✅ Enable Caching (@Cacheable)	      Reduces database load

-------------------------------------------------------------------------------------------------------------
How do you handle database migrations in a Spring Boot JPA application?

In a Spring Boot JPA application, managing database schema changes manually can lead to issues like inconsistent database states across environments. 
To automate and manage schema changes, we use database migration tools such as:
✅ Flyway
✅ Liquibase
-------------------------------------------------------------------------------------------------------------
What are some best practices for writing efficient JPA queries?

Best Practice	                            Why?
✅ Use FetchType.LAZY	                  Avoids unnecessary data loading
✅ Fix N+1                               with JOIN FETCH or @EntityGraph	Reduces excessive queries
✅ Use Pagination (Pageable)	         Prevents loading too many records
✅ Use Projections (interface projection) Fetches only required fields
✅ Use Indexes (@Index)	                  Speeds up searches
✅ Enable Batch Inserts (saveAll())  	  Improves insert performance
✅ Use EntityManager.clear() in Loops	  Prevents memory leaks
✅ Use Native Queries for Complex Joins	  Optimizes query execution




















































